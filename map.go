package main

import (
	rl "github.com/gen2brain/raylib-go/raylib"
	"math"
)

type Map struct {
	Width, Height, PlayerStartX, PlayerStartY int
	Tiles                                     []*Tile
	Entities                                  []*Entity
	seed                                      int64
	CustomSeed                                bool
}

//
// Fill Map with blocked tiles
// @todo extend this to use a selection?
//
func (m *Map) Fill() {
	for x := 0; x < m.Width; x++ {
		for y := 0; y < m.Height; y++ {
			m.Set(x, y, NewTile(true, true))
		}
	}
}

func (m *Map) AddRoom(room Rect) {
	for x := room.x1 + 1; x < room.x2; x++ {
		for y := room.y1 + 1; y < room.y2; y++ {
			tile := m.At(x, y)
			tile.blocked = false
			tile.blockSight = false
		}
	}
}

func (m *Map) AddHTunnel(x1, x2, y int) {
	for x := int(math.Min(float64(x1), float64(x2))); x < int(math.Max(float64(x1), float64(x2)))+1; x++ {
		tile := m.At(x, y)
		tile.blocked = false
		tile.blockSight = false
	}
}

func (m *Map) AddVTunnel(y1, y2, x int) {
	for y := int(math.Min(float64(y1), float64(y2))); y < int(math.Max(float64(y1), float64(y2)))+1; y++ {
		tile := m.At(x, y)
		tile.blocked = false
		tile.blockSight = false
	}
}

//
// Returns the center cell of the map
// @todo bounds check
//
func (m Map) Center() (int, int) {
	return int(math.Floor(float64(m.Width/2))) - 1, int(math.Floor(float64(m.Height/2))) - 1
}

//
// Returns whether the coordinate is inside the map bounds.
//
func (m Map) Inside(x, y int) bool {
	return x >= 0 && x < m.Width && y >= 0 && y < m.Height
}

//
// Returns the Tile found at (x,y)
//
func (m Map) At(x, y int) *Tile {
	return m.Tiles[m.IdxAt(x, y)]
}

//
// Returns the Tile found at (idx)
// @todo add bounds check?
//
func (m Map) AtIdx(idx int) *Tile {
	return m.Tiles[idx]
}

//
// Returns the 1D array index for the
// given (x,y)
//
func (m Map) IdxAt(x, y int) int {
	return (m.Width * y) + x
}

//
// Set the Tile for given (x,y)
//
func (m *Map) Set(x, y int, val *Tile) {
	m.Tiles[m.IdxAt(x, y)] = val
}

//
// Draw the map
// @todo move to a render method?
//
func (m *Map) Draw(engine *Engine) {
	for x := 0; x < m.Width; x++ {
		for y := 0; y < m.Height; y++ {
			cell := m.At(x, y)

			if cell.inFOV {
				// Can we see this cell?
				if cell.blocked == true {
					engine.font.Draw(178, rl.Vector2{X: float32(x * engine.font.sprites.TWidth), Y: float32(y * engine.font.sprites.THeight)}, LightWallColour)
				} else {
					engine.font.Draw('.', rl.Vector2{X: float32(x * engine.font.sprites.TWidth), Y: float32(y * engine.font.sprites.THeight)}, LightGroundColour)
				}
			} else if cell.seen {
				// Have we explored this cell?
				if cell.blocked == true {
					engine.font.Draw(178, rl.Vector2{X: float32(x * engine.font.sprites.TWidth), Y: float32(y * engine.font.sprites.THeight)}, DarkWallColour)
				} else {
					engine.font.Draw('.', rl.Vector2{X: float32(x * engine.font.sprites.TWidth), Y: float32(y * engine.font.sprites.THeight)}, DarkGroundColour)
				}
			}
		}
	}
}

//
// Set a custom seed for this map
//
func (m *Map) SetSeed(seed int64) {
	m.CustomSeed = true
	m.seed = seed
}

//
// Returns a new Map "object" that has been
// generated by the passed MapGeneratorFunction
//
func NewMap(w, h int) *Map {
	m := &Map{Width: w, Height: h, Tiles: make([]*Tile, w*h)}

	// Initialise the tiles
	m.Fill()

	return m
}
